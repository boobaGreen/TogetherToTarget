import React, { useState } from "react";
import { Link } from "react-router-dom";
import { useAuth } from "../hooks/useAuth";
import "./GroupsPage.css";

interface Member {
  id: string;
  name: string;
  lastCheckin: string;
  streak: number;
}

interface Group {
  id: string;
  name: string;
  description: string;
  members: Member[];
  progress: number;
  status: "active" | "completed" | "paused";
  unreadMessages?: number;
}

const GroupsPage: React.FC = () => {
  const { user } = useAuth();
  const [filter, setFilter] = useState<"all" | "active" | "completed">("all");

  // Mock data con chat badge
  const mockGroups: Group[] = [
    {
      id: "1",
      name: "Fitness Challenge 2024",
      description: "Obiettivo: 50kg di perdita peso collettiva",
      members: [
        { id: "1", name: "Marco", lastCheckin: "2025-08-09", streak: 15 },
        { id: "2", name: "Sofia", lastCheckin: "2025-08-08", streak: 12 },
      ],
      progress: 75,
      status: "active",
      unreadMessages: 3,
    },
    {
      id: "2",
      name: "Lettura Mensile",
      description: "Obiettivo: 12 libri in un anno",
      members: [
        { id: "4", name: "Emma", lastCheckin: "2025-08-09", streak: 22 },
        { id: "5", name: "Luca", lastCheckin: "2025-08-08", streak: 18 },
        { id: "6", name: "Alex", lastCheckin: "2025-08-07", streak: 8 },
      ],
      progress: 45,
      status: "active",
      unreadMessages: 7,
    },
    {
      id: "3",
      name: "Startup Launch",
      description: "Obiettivo: Lancio MVP entro 3 mesi",
      members: [
        { id: "6", name: "Anna", lastCheckin: "2025-08-09", streak: 30 },
        { id: "7", name: "Pietro", lastCheckin: "2025-08-09", streak: 25 },
        { id: "8", name: "Giulia", lastCheckin: "2025-08-08", streak: 20 },
        { id: "9", name: "Matteo", lastCheckin: "2025-08-07", streak: 15 },
      ],
      progress: 100,
      status: "completed",
    },
  ];

  const getStatusBadge = (status: string) => {
    switch (status) {
      case "active":
        return { text: "In corso", class: "status-active" };
      case "completed":
        return { text: "Completato", class: "status-completed" };
      case "paused":
        return { text: "In pausa", class: "status-paused" };
      default:
        return { text: "Sconosciuto", class: "status-unknown" };
    }
  };

  const getStreakColor = (streak: number) => {
    if (streak >= 20) return "streak-fire";
    if (streak >= 10) return "streak-hot";
    return "streak-normal";
  };

  // Separazione per status
  const activeGroups = mockGroups.filter(g => g.status === 'active');
  const completedGroups = mockGroups.filter(g => g.status === 'completed');

  // Logica Premium vs Non-Premium
  const isPremium = user?.subscription_type === 'premium';
  
  let visibleGroups: Group[] = [];
  let numEmptySlots = 0;
  let showPremiumCTA = false;

  if (isPremium) {
    // PREMIUM: PuÃ² avere max 3 gruppi attivi contemporaneamente
    if (filter === 'all') {
      // Mostra solo gruppi attivi qui, i conclusi li aggiungeremo dopo
      visibleGroups = activeGroups.slice(0, 3);
      if (activeGroups.length < 3) {
        numEmptySlots = 3 - activeGroups.length;
      }
    } else if (filter === 'active') {
      // Mostra fino a 3 gruppi attivi + slot vuoti
      visibleGroups = activeGroups.slice(0, 3);
      if (activeGroups.length < 3) {
        numEmptySlots = 3 - activeGroups.length;
      }
    } else if (filter === 'completed') {
      // Solo gruppi conclusi, niente slot vuoti
      visibleGroups = completedGroups;
      numEmptySlots = 0;
    }
  } else {
    // NON-PREMIUM: PuÃ² avere solo 1 gruppo attivo
    if (filter === 'all') {
      // Mostra solo 1 gruppo attivo qui, i conclusi li aggiungeremo dopo
      visibleGroups = activeGroups.slice(0, 1);
      showPremiumCTA = true;
    } else if (filter === 'active') {
      // Mostra 1 gruppo attivo + 2 carte CTA premium
      visibleGroups = activeGroups.slice(0, 1);
      showPremiumCTA = true;
    } else if (filter === 'completed') {
      // Solo gruppi conclusi, niente CTA
      visibleGroups = completedGroups;
      showPremiumCTA = false;
    }
  }

  return (
    <div className="groups-page">
      <div className="groups-header">
        <div
          style={{
            display: "flex",
            justifyContent: "space-between",
            alignItems: "center",
          }}
        >
          <div>
            <h1>I tuoi Gruppi</h1>
            <p>Raggiungi gli obiettivi insieme ai tuoi compagni</p>
          </div>
          {isPremium && <div className="premium-badge">âœ¨ Premium Active</div>}
        </div>

        {/* Filtri gruppi */}
        <div className="groups-filters">
          <button
            className={`filter-btn ${filter === "all" ? "active" : ""}`}
            onClick={() => setFilter("all")}
          >
            Tutti ({mockGroups.length})
          </button>
          <button
            className={`filter-btn ${filter === "active" ? "active" : ""}`}
            onClick={() => setFilter("active")}
          >
            Attivi ({mockGroups.filter((g) => g.status === "active").length})
          </button>
          <button
            className={`filter-btn ${filter === "completed" ? "active" : ""}`}
            onClick={() => setFilter("completed")}
          >
            Conclusi (
            {mockGroups.filter((g) => g.status === "completed").length})
          </button>
        </div>
      </div>

      <div className="groups-grid">
        {/* Gruppi esistenti */}
        {visibleGroups.map((group, idx) => (
          <div
            key={group.id}
            className={`group-card${idx === 0 ? " shimmer-effect" : ""}`}
          >
            <div className="group-header">
              <div className="group-title">
                <h3>{group.name}</h3>
                <span
                  className={`status-badge ${
                    getStatusBadge(group.status).class
                  }`}
                >
                  {getStatusBadge(group.status).text}
                </span>
              </div>
              <p className="group-description">{group.description}</p>
            </div>

            <div className="progress-section">
              <div className="progress-header">
                <span>Progresso</span>
                <span className="progress-percentage">{group.progress}%</span>
              </div>
              <div className="progress-bar">
                <div
                  className="progress-fill"
                  style={{ width: `${group.progress}%` }}
                ></div>
              </div>
            </div>

            <div className="members-section">
              <div className="members-header">
                <h4 className="members-title">Membri ({group.members.length})</h4>
                {typeof group.unreadMessages === "number" && group.unreadMessages > 0 && (
                  <div className="chat-badge chat-badge-professional" title={`${group.unreadMessages} messaggi non letti`}>
                    <span className="chat-icon">ðŸ’¬</span>
                    <span className="unread-count">{group.unreadMessages}</span>
                  </div>
                )}
              </div>
              
              <div className="members-list">
                {group.members.slice(0, 3).map((member) => (
                  <div key={member.id} className="member-item">
                    <div className="member-info">
                      <div className="member-name">{member.name}</div>
                      <div className="member-checkin">
                        {member.lastCheckin === "2025-08-09" ? "âœ… Check-in oggi" : `Ultimo: ${member.lastCheckin}`}
                      </div>
                    </div>
                    <div className={`member-streak ${getStreakColor(member.streak)}`}>
                      ðŸ”¥ {member.streak}
                    </div>
                  </div>
                ))}
                {group.members.length > 3 && (
                  <div className="members-more">
                    +{group.members.length - 3} altri membri
                  </div>
                )}
              </div>

              <div className="group-actions">
                <Link
                  to={`/groups/${group.id}`}
                  className="btn-premium view-group-btn"
                  style={{ textDecoration: 'none' }}
                >
                  Visualizza Gruppo
                </Link>
                <Link
                  to="/test-checkin"
                  className="btn-primary checkin-btn"
                  title="Daily Check-in"
                  style={{ textDecoration: 'none' }}
                >
                  Daily Check-in
                </Link>
              </div>
            </div>
          </div>
        ))}

        {/* Carte CTA Premium per utenti non-premium */}
        {showPremiumCTA && [1, 2].map((index) => (
          <div key={`premium-cta-${index}`} className="group-card premium-cta-card">
            <div className="premium-cta-overlay">
              <div className="premium-cta-content">
                <div className="premium-icon">âœ¨</div>
                <h3 className="premium-title">Sblocca Premium</h3>
                <p className="premium-description">
                  Crea fino a 3 gruppi attivi contemporaneamente e raggiungi piÃ¹ obiettivi insieme
                </p>
                <button className="btn-premium-upgrade">
                  Passa a Premium
                </button>
              </div>
            </div>
          </div>
        ))}

        {/* Slot vuoti per premium - Solo per filtri 'all' e 'active' */}
        {filter !== "completed" &&
          isPremium &&
          numEmptySlots > 0 &&
          Array.from({ length: numEmptySlots }, (_, index) => {
            // Definisci diverse categorie di obiettivi che non sono giÃ  attive
            const activeCategories = activeGroups.map((g) =>
              g.name.toLowerCase()
            );
            const availableObjectives = [
              {
                icon: "ðŸ’ª",
                title: "Fitness & Salute",
                description: "Raggiungi i tuoi obiettivi di benessere fisico",
                gradient: "linear-gradient(135deg, #f093fb, #f5576c)",
                available: !activeCategories.some(
                  (cat) => cat.includes("fitness") || cat.includes("challenge")
                ),
              },
              {
                icon: "ðŸ“š",
                title: "Crescita Personale",
                description: "Sviluppa nuove competenze e conoscenze",
                gradient: "linear-gradient(135deg, #4facfe, #00f2fe)",
                available: !activeCategories.some(
                  (cat) => cat.includes("lettura") || cat.includes("libro")
                ),
              },
              {
                icon: "ðŸš€",
                title: "Carriera & Business",
                description: "Accelera la tua crescita professionale",
                gradient: "linear-gradient(135deg, #43e97b, #38f9d7)",
                available: !activeCategories.some(
                  (cat) => cat.includes("startup") || cat.includes("lavoro")
                ),
              },
              {
                icon: "ðŸŽ¯",
                title: "Hobby & Passioni",
                description: "Dedica tempo alle tue passioni",
                gradient: "linear-gradient(135deg, #fa709a, #fee140)",
                available: true,
              },
              {
                icon: "ðŸ’°",
                title: "Finanze & Risparmi",
                description: "Migliora la tua situazione finanziaria",
                gradient: "linear-gradient(135deg, #667eea, #764ba2)",
                available: true,
              },
            ];

            // Filtra solo gli obiettivi disponibili (non giÃ  attivi)
            const availableOptions = availableObjectives.filter(
              (obj) => obj.available
            );
            const selectedObjective =
              availableOptions[index % availableOptions.length] ||
              availableObjectives[0];

            return (
              <div
                key={`empty-${index}`}
                className="group-card group-card-empty"
                style={{
                  background:
                    "linear-gradient(120deg, #ede9fe 60%, #c7bfff 100%)",
                  border: "2px dashed #8b5cf6",
                  position: "relative",
                  cursor: "pointer",
                  transition: "all 0.3s ease",
                }}
                onClick={() => {
                  // Navigate to new group creation with category
                  console.log(
                    `Create new ${selectedObjective.title} group clicked`
                  );
                }}
              >
                <div
                  style={{
                    display: "flex",
                    flexDirection: "column",
                    alignItems: "center",
                    justifyContent: "center",
                    height: "100%",
                    textAlign: "center",
                    padding: "2rem",
                  }}
                >
                  <div
                    style={{
                      width: "80px",
                      height: "80px",
                      borderRadius: "50%",
                      background: selectedObjective.gradient,
                      display: "flex",
                      alignItems: "center",
                      justifyContent: "center",
                      marginBottom: "1.5rem",
                      boxShadow: "0 8px 25px rgba(139, 92, 246, 0.3)",
                    }}
                  >
                    <span
                      style={{
                        fontSize: "2.5rem",
                      }}
                    >
                      {selectedObjective.icon}
                    </span>
                  </div>
                  <h3
                    style={{
                      margin: "0 0 1rem 0",
                      color: "#6d28d9",
                      fontSize: "1.25rem",
                      fontWeight: "600",
                    }}
                  >
                    {selectedObjective.title}
                  </h3>
                  <p
                    style={{
                      margin: 0,
                      color: "#7c3aed",
                      fontSize: "0.95rem",
                      lineHeight: "1.4",
                    }}
                  >
                    {selectedObjective.description}
                  </p>
                </div>

                {/* Effetto hover elegante */}
                <div
                  style={{
                    position: "absolute",
                    top: 0,
                    left: 0,
                    right: 0,
                    bottom: 0,
                    background:
                      "linear-gradient(135deg, rgba(139, 92, 246, 0.1), rgba(124, 58, 237, 0.1))",
                    borderRadius: "inherit",
                    opacity: 0,
                    transition: "opacity 0.3s ease",
                  }}
                  onMouseEnter={(e) => (e.currentTarget.style.opacity = "1")}
                  onMouseLeave={(e) => (e.currentTarget.style.opacity = "0")}
                />
              </div>
            );
          })}
      </div>
    </div>
  );
};

export default GroupsPage;
